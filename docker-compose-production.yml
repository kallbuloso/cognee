services:
  cognee:
    container_name: cognee
    networks:
      - cognee_net
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - cognee_system:${SYSTEM_ROOT_DIRECTORY:-/app/.cognee_system}
    env_file:
      - .env
    environment:
      - DEBUG=false # Change to true if debugging
      - HOST=0.0.0.0
      - ENVIRONMENT=production
      - LOG_LEVEL=ERROR
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    extra_hosts:
      # Allows the container to reach your local machine using "host.docker.internal" instead of "localhost"
      - "host.docker.internal:host-gateway"
    ports:
      - 8000:8000
      - 5678:5678 # Debugger port
    deploy:
      resources:
        limits:
          cpus: "4.0"
          memory: 8GB
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "PORT=8000; (wget -qO- http://127.0.0.1:8000/health || curl -fsS http://127.0.0.1:8000/health) >/dev/null || exit 1"
        ]
      interval: 15s
      timeout: 5s
      retries: 12
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "5"

  # Cognee MCP Server - Model Context Protocol server for IDE integration
  cognee-mcp:
    container_name: cognee-mcp
    profiles:
      - mcp
    networks:
      - cognee_net
    build:
      context: .
      dockerfile: cognee-mcp/Dockerfile
    environment:
      - DEBUG=false # Change to true if debugging
      - LLM_API_KEY="${LLM_API_KEY}"
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - TRANSPORT_MODE="${MCP_TRANSPORT_MODE:-sse}"
      # Database configuration - should match the main cognee service
      - DB_PROVIDER=${DB_PROVIDER:-sqlite}
      - DB_HOST=${DB_HOST:-host.docker.internal}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-cognee_db}
      - DB_USERNAME=${DB_USERNAME:-cognee}
      - DB_PASSWORD=${DB_PASSWORD:-cognee}
      # MCP specific configuration
      - MCP_LOG_LEVEL=INFO
      - PYTHONUNBUFFERED=1
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "8000:8000" # MCP port
      - "5678:5678" # MCP debugger port
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 4GB

  # NOTE: Frontend is a work in progress and supports minimum amount of features required to be functional.
  # If you want to use Cognee with a UI environment you can integrate the Cognee MCP Server into Cursor / Claude Desktop / Visual Studio Code (through Cline/Roo)
  frontend:
    container_name: frontend
    profiles:
        - ui
    build:
      context: ./cognee-frontend
      dockerfile: Dockerfile
    volumes:
      - ./cognee-frontend/src:/app/src
      - ./cognee-frontend/public:/app/public
    ports:
      - 3000:3000
      # - 9229:9229 # Debugging
    networks:
      - cognee_net

  neo4j:
    image: neo4j:latest
    container_name: neo4j
    profiles:
      - neo4j
    ports:
      - 7474:7474
      - 7687:7687
    environment:
      - NEO4J_AUTH=neo4j/${NEO4J_PASSWORD}
      - NEO4J_PLUGINS=["apoc","graph-data-science"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,gds.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*,gds.*
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    deploy:
      resources:
        limits:
          memory: 2g
        reservations:
          memory: 1g
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -a bolt://localhost:7687 -u neo4j -p ${NEO4J_PASSWORD} 'RETURN 1' | grep -q '1'"]
      interval: 20s
      timeout: 10s
      retries: 30
      start_period: 90s
    restart: unless-stopped
    networks:
      - cognee_net

  postgres:
    image: pgvector/pgvector:pg17
    container_name: postgres
    profiles:
      - postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      # - postgres_data:/var/lib/postgresql/data
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME} -h localhost || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s
    restart: unless-stopped
    networks:
      - cognee_net

  redis:
    image: redis:7-alpine
    container_name: redis
    profiles:
      - redis
    ports:
      - "6379:6379"
    networks:
      - cognee_net
    volumes:
      - redis_data:/data
    command: [ "redis-server", "--appendonly", "yes" ]


  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: redisinsight
    restart: always
    ports:
      - "5540:5540"
    networks:
      - cognee_net


networks:
  cognee_net:
    name: cognee_net

volumes:
  cognee_system: {}
  pg_data: {}
  neo4j_data: {}
  neo4j_logs: {}
  neo4j_import: {}
  neo4j_plugins: {}
  redis_data: {}
